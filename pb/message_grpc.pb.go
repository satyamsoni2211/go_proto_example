// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FibonacciServiceClient is the client API for FibonacciService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FibonacciServiceClient interface {
	CalculateFibonacci(ctx context.Context, in *FibonacciRequest, opts ...grpc.CallOption) (FibonacciService_CalculateFibonacciClient, error)
}

type fibonacciServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFibonacciServiceClient(cc grpc.ClientConnInterface) FibonacciServiceClient {
	return &fibonacciServiceClient{cc}
}

func (c *fibonacciServiceClient) CalculateFibonacci(ctx context.Context, in *FibonacciRequest, opts ...grpc.CallOption) (FibonacciService_CalculateFibonacciClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FibonacciService_serviceDesc.Streams[0], "/FibonacciService/CalculateFibonacci", opts...)
	if err != nil {
		return nil, err
	}
	x := &fibonacciServiceCalculateFibonacciClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FibonacciService_CalculateFibonacciClient interface {
	Recv() (*FibonacciResponse, error)
	grpc.ClientStream
}

type fibonacciServiceCalculateFibonacciClient struct {
	grpc.ClientStream
}

func (x *fibonacciServiceCalculateFibonacciClient) Recv() (*FibonacciResponse, error) {
	m := new(FibonacciResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FibonacciServiceServer is the server API for FibonacciService service.
// All implementations should embed UnimplementedFibonacciServiceServer
// for forward compatibility
type FibonacciServiceServer interface {
	CalculateFibonacci(*FibonacciRequest, FibonacciService_CalculateFibonacciServer) error
}

// UnimplementedFibonacciServiceServer should be embedded to have forward compatible implementations.
type UnimplementedFibonacciServiceServer struct {
}

func (*UnimplementedFibonacciServiceServer) CalculateFibonacci(*FibonacciRequest, FibonacciService_CalculateFibonacciServer) error {
	return status.Errorf(codes.Unimplemented, "method CalculateFibonacci not implemented")
}

func RegisterFibonacciServiceServer(s *grpc.Server, srv FibonacciServiceServer) {
	s.RegisterService(&_FibonacciService_serviceDesc, srv)
}

func _FibonacciService_CalculateFibonacci_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FibonacciRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FibonacciServiceServer).CalculateFibonacci(m, &fibonacciServiceCalculateFibonacciServer{stream})
}

type FibonacciService_CalculateFibonacciServer interface {
	Send(*FibonacciResponse) error
	grpc.ServerStream
}

type fibonacciServiceCalculateFibonacciServer struct {
	grpc.ServerStream
}

func (x *fibonacciServiceCalculateFibonacciServer) Send(m *FibonacciResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _FibonacciService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "FibonacciService",
	HandlerType: (*FibonacciServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CalculateFibonacci",
			Handler:       _FibonacciService_CalculateFibonacci_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "message.proto",
}
