// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// UploadImageServiceClient is the client API for UploadImageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UploadImageServiceClient interface {
	UploadImage(ctx context.Context, opts ...grpc.CallOption) (UploadImageService_UploadImageClient, error)
}

type uploadImageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUploadImageServiceClient(cc grpc.ClientConnInterface) UploadImageServiceClient {
	return &uploadImageServiceClient{cc}
}

func (c *uploadImageServiceClient) UploadImage(ctx context.Context, opts ...grpc.CallOption) (UploadImageService_UploadImageClient, error) {
	stream, err := c.cc.NewStream(ctx, &_UploadImageService_serviceDesc.Streams[0], "/UploadImageService/UploadImage", opts...)
	if err != nil {
		return nil, err
	}
	x := &uploadImageServiceUploadImageClient{stream}
	return x, nil
}

type UploadImageService_UploadImageClient interface {
	Send(*UploadImageRequest) error
	CloseAndRecv() (*UploadImageResponse, error)
	grpc.ClientStream
}

type uploadImageServiceUploadImageClient struct {
	grpc.ClientStream
}

func (x *uploadImageServiceUploadImageClient) Send(m *UploadImageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *uploadImageServiceUploadImageClient) CloseAndRecv() (*UploadImageResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadImageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UploadImageServiceServer is the server API for UploadImageService service.
// All implementations should embed UnimplementedUploadImageServiceServer
// for forward compatibility
type UploadImageServiceServer interface {
	UploadImage(UploadImageService_UploadImageServer) error
}

// UnimplementedUploadImageServiceServer should be embedded to have forward compatible implementations.
type UnimplementedUploadImageServiceServer struct {
}

func (*UnimplementedUploadImageServiceServer) UploadImage(UploadImageService_UploadImageServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadImage not implemented")
}

func RegisterUploadImageServiceServer(s *grpc.Server, srv UploadImageServiceServer) {
	s.RegisterService(&_UploadImageService_serviceDesc, srv)
}

func _UploadImageService_UploadImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UploadImageServiceServer).UploadImage(&uploadImageServiceUploadImageServer{stream})
}

type UploadImageService_UploadImageServer interface {
	SendAndClose(*UploadImageResponse) error
	Recv() (*UploadImageRequest, error)
	grpc.ServerStream
}

type uploadImageServiceUploadImageServer struct {
	grpc.ServerStream
}

func (x *uploadImageServiceUploadImageServer) SendAndClose(m *UploadImageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *uploadImageServiceUploadImageServer) Recv() (*UploadImageRequest, error) {
	m := new(UploadImageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _UploadImageService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "UploadImageService",
	HandlerType: (*UploadImageServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadImage",
			Handler:       _UploadImageService_UploadImage_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "image.proto",
}
